<?xml version="1.0"?>
<!--
    RS T265 odometry launch file
-->

<launch>

    <!-- Launch file arguments -->
    <arg name="xavier"         default="false"/>
    <arg name="lidar_ip"       default="192.168.3.11" />
    <arg name="is_indoors"     default="true" />
    <arg name="initial_pose_x" default="0.0" />
    <arg name="initial_pose_y" default="0.0" />
    <arg name="initial_pose_a" default="0.0" />
    <arg name="use_web_camera"  default="false"/>
    <arg name="pedestrian_demo" default="false"/>

    <!-- IMU -->
    <node ns="imu" name="imu_node" pkg="svea_sensors" type="bno055_i2c_node" respawn="true" respawn_delay="2">
        <param if="$(arg xavier)"     name="device" value="/dev/i2c-8" />
        <param unless="$(arg xavier)" name="device" value="/dev/i2c-1" />
        <param name="address"   type="int"      value="40"/> <!-- 0x28 == 40 is the default for BNO055 -->
        <param name="frame_id"  type="string"   value="imu"/>
    </node>

    <!-- Static transforms for sensors -->
    <include file="$(find svea_sensors)/launch/transforms.launch">
        <arg name="xavier"          value="$(arg xavier)"/>
        <arg name="use_web_camera"  value="$(arg use_web_camera)"/>
        <arg name="pedestrian_demo" value="$(arg pedestrian_demo)"/>
    </include>

    <!-- RS T265 -->
    <group if="$(arg is_indoors)" ns="rs">
        <!-- Setings to turn of the SLAM capabilities of the RS T265 -->
        <rosparam>
            realsense_camera/tracking_module/enable_relocalization: false
            realsense_camera/tracking_module/enable_pose_jumping: false
            realsense_camera/tracking_module/hold_back_imu_for_frames: false
            realsense_camera/tracking_module/odom_frame_id: "odom"
        </rosparam>
        <!-- Launch the RS T265 -->
        <include file="$(find realsense2_camera)/launch/rs_t265.launch">
            <arg name="publish_odom_tf" value="false"/>
            <arg name="camera"          value="t265_camera"/>
        </include>
    </group>

    <!-- Velocity estimation -->
    <node pkg="svea_sensors" type="actuation_to_twist.py" name="actuation_to_twist" output="screen"/>

    <!-- Robot localization (Local EKF)-->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_rs" clear_params="true" output="screen">
        <rosparam command="load" file="$(find svea_sensors)/params/robot_localization/rs_ekf.yaml" />
        <!-- initial_state: [x,          y,          z, 
                             roll,       pitch,      yaw, 
                             x_dot,      y_dot,      z_dot, 
                             roll_dot,   pitch_dot,  yaw_dot, 
                             x_dot_dot,  y_dot_dot,  z_dot_dot]-->
        <rosparam subst_value="true">
        initial_state: [$(arg initial_pose_x),  $(arg initial_pose_y),  0.0, 
                        0.0,                    0.0,                    $(arg initial_pose_a), 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0]
        </rosparam>
        <param name="publish_tf"    value="true"/>
        <param name="odom0"         value="rs/t265_camera/odom/sample"/>
        <param name="imu0"          value="imu/data"/>
        <param name="twist0"        value="actuation_twist"/>
        <param name="twist1"        value="wheel_encoder_twist"/>
    </node>

    <!-- Global EKF -->
    <node unless="$(arg is_indoors)" pkg="robot_localization" type="ekf_localization_node" name="ekf_global" clear_params="true" output="screen">
        <rosparam command="load" file="$(find svea_sensors)/params/robot_localization/global_ekf.yaml"/>
        <!-- initial_state: [x,          y,          z, 
                             roll,       pitch,      yaw, 
                             x_dot,      y_dot,      z_dot, 
                             roll_dot,   pitch_dot,  yaw_dot, 
                             x_dot_dot,  y_dot_dot,  z_dot_dot]-->
        <rosparam subst_value="true">
        initial_state: [$(arg initial_pose_x),  $(arg initial_pose_y),  0.0, 
                        0.0,                    0.0,                    $(arg initial_pose_a), 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0, 
                        0.0,                    0.0,                    0.0]
        </rosparam>
        <param name="publish_tf"            value="true"/>
        <param name="odom0"                 value="odometry/gps"/>
        <param name="imu0"                  value="imu/data"/>
        <param name="twist0"                value="actuation_twist"/>
        <param name="twist1"                value="wheel_encoder_twist"/>
        <param name="pose0"                 value="static/pose"/>
        <remap from="/odometry/filtered"    to="/odometry/filtered/global"/>
        <remap from="/set_pose"    to="/global/set_pose"/>
    </node>

    <!-- Hokuyo LIDAR -->
    <node pkg="urg_node" type="urg_node" name="Hokyoulidar">
        <param name="ip_address"        value="$(arg lidar_ip)" />
        <param name="frame_id"          value="laser"/>
        <param name="calibrate_time"    value="true"/>
        <param name="publish_intensity" value="true"/>
        <param name="publish_multiecho" value="false"/>
        <param name="angle_min"         value="-2.355"/>
        <param name="angle_max"         value="2.355"/>
    </node>
</launch>