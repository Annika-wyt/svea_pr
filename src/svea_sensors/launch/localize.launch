<?xml version="1.0"?>
<!--
    Launch default odometry and localization
-->

<launch>

    <!-- Launch file arguments -->
    <arg name="xavier"                  default="false"/>
    <arg name="use_camera"              default="true"/>
    <arg name="camera"                  default="rs"/>
    <arg name="map_file"                default=""/>
    <arg name="map_frame"               default="map"/>
    <arg name="wait_for_transform"      default="false"/>
    <arg name="publish_odometry"        default="true"/>
    <arg name="publish_pose"            default="true"/>

    <arg name="initial_pose_x"          default="0.0" />
    <arg name="initial_pose_y"          default="0.0" />
    <arg name="initial_pose_a"          default="0.0" />

    <arg name="use_wheel_encoders"      default="false" />
    <arg name="is_indoors"              default="true" />
    <!-- Should be set to true, if only the localization is running (i.e. this is needed in order to have wheel encoders
    and actuation_to_twist working) -->
    <arg name="start_serial"            default="false" />
    <arg name="device"                  default="/dev/GPS" />
    <arg name="delay"                   default="2.0"/>
    <!-- yaw_offset is set to 0 if the robot is facing East during initialization -->
    <arg name="yaw_offset"              default="0"/>
    <arg name="port"                    default="/dev/ttyACM0"/>

    <!-- For camera and aruco detection-->
    <arg name="use_web_camera"          default="false"/>
    <arg name="camera_info_file"        default="usbc_web_camera.yaml"/>
    <arg name="image"                   default="/camera/image_raw"/>
    <arg name="aruco_pose"              default="aruco_pose"/>
    <arg name="aruco_dict"              default="DICT_4X4_250"/>
    <arg name="aruco_size"              default="0.365"/>
    <arg name="aruco_tf_name"           default="aruco"/>
    <arg name="device_id"               default="1"/> 
    <arg name="static_gps_fix_topic"    default="static/gps/fix"/>
    <arg name="odometry_gps_topic"      default="static/odometry/gps"/>
    <arg name="aruco_pose_topic"        default="aruco_pose"/>
    <arg name="aruco_id"                default="11"/>    
    <arg name="pedestrian_demo"         default="false"/>

    <!-- Start the stereo camera -->
    <group if="$(arg use_camera)">
        <param name="use_sim_time" value="false"/>
        <include if="$(eval camera == 'rs')" file="$(find svea_sensors)/launch/rs_odometry.launch">
            <arg name="xavier"         value="$(arg xavier)"/>
            <arg name="is_indoors"     value="$(arg is_indoors)"/>
            <arg name="initial_pose_x" value="$(arg initial_pose_x)" />
            <arg name="initial_pose_y" value="$(arg initial_pose_y)" />
            <arg name="initial_pose_a" value="$(arg initial_pose_a)" />
            <arg name="pedestrian_demo" value="$(arg pedestrian_demo)"/>
            
        </include>
        <include if="$(eval camera == 'zed')" file="$(find svea_sensors)/launch/zed_odometry.launch">
            <arg name="xavier"  value="$(arg xavier)"/>
        </include>
    </group>

    <!-- Start low-level interface -->
    <group if="$(arg start_serial)">
        <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
            <param name="port" value="$(arg port)"/>
            <param name="baud" value="250000" />
        </node>
    </group>

    <!-- Start wheel encoders -->
    <group if="$(arg use_wheel_encoders)">
        <include file="$(find svea_sensors)/launch/wheel_odometry.launch" />
    </group>
    
    <!-- Do not start the sensors, useful when running from a bag file -->
    <group unless="$(arg use_camera)">
        <param name="use_sim_time" value="true" />
        <node if="$(eval camera == 'rs')" pkg="robot_localization" type="ekf_localization_node" name="ekf_rs" clear_params="true">
            <rosparam command="load"    file="$(find svea_sensors)/params/robot_localization/rs_ekf.yaml" />
            <!-- initial_state: [x,          y,          z, 
                                 roll,       pitch,      yaw, 
                                 x_dot,      y_dot,      z_dot, 
                                 roll_dot,   pitch_dot,  yaw_dot, 
                                 x_dot_dot,  y_dot_dot,  z_dot_dot]-->
            <rosparam subst_value="true">
            initial_state: [$(arg initial_pose_x),  $(arg initial_pose_y),  0.0, 
                            0.0,                    0.0,                    $(arg initial_pose_a), 
                            0.0,                    0.0,                    0.0, 
                            0.0,                    0.0,                    0.0, 
                            0.0,                    0.0,                    0.0]
            </rosparam>
            <rosparam command="load"    file="$(find svea_sensors)/params/robot_localization/initial_state.yaml"/>
            <param name="publish_tf"    value="true"/>
            <param name="odom0"         value="rs/t265_camera/odom/sample"/>
            <param name="imu0"          value="imu/data"/>
            <param name="twist0"        value="actuation_twist"/>
            <param name="twist1"        value="wheel_encoder_twist"/>
        </node>
        <!-- Global EKF -->
        <node unless="$(arg is_indoors)" pkg="robot_localization" type="ekf_localization_node" name="ekf_global" clear_params="true" output="screen">
            <rosparam command="load"            file="$(find svea_sensors)/params/robot_localization/global_ekf.yaml"/>
            <rosparam subst_value="true">
            initial_state: [$(arg initial_pose_x),  $(arg initial_pose_y),  0.0, 
                            0.0,                    0.0,                    $(arg initial_pose_a), 
                            0.0,                    0.0,                    0.0, 
                            0.0,                    0.0,                    0.0, 
                            0.0,                    0.0,                    0.0]
            </rosparam>
            <param name="publish_tf"            value="true"/>
            <param name="odom0"                 value="odometry/gps"/>
            <param name="imu0"                  value="imu/data"/>
            <param name="twist0"                value="actuation_twist"/>
            <param name="twist1"                value="wheel_encoder_twist"/>
            <param name="pose0"                 value="static/pose"/>
            <remap from="/odometry/filtered"    to="/odometry/filtered/global"/>
        </node>
        <node if="$(eval camera == 'zed')" pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
            <rosparam command="load"    file="$(find svea_sensors)/params/robot_localization/zed_ekf.yaml"/>
            <param name="imu0"          value="/imu/data"/>
            <param name="odom0"         value="/zed/zed_node/odom"/>
        </node>
        <include file="$(find svea_sensors)/launch/transforms.launch">
            <arg name="xavier"          value="$(arg xavier)"/>
            <arg name="use_web_camera"  value="$(arg use_web_camera)"/>
            <arg name="pedestrian_demo" value="$(arg pedestrian_demo)"/>
        </include>
    </group>

    <!-- Start map server -->
    <node if="$(eval map_file != '')" pkg="map_server" type="map_server" name="map_server" output="screen" args="$(arg map_file)"/>

    <!-- Start localization (AMCL) -->
    <node if="$(arg is_indoors)" pkg="amcl" type="amcl" name="amcl_localization" output="screen">
        <rosparam command="load"        file="$(find svea_sensors)/params/amcl/localize.yaml"/>
        <param name="scan"              value="scan"/>
        <param name="initial_pose_x"    value="$(arg initial_pose_x)" />
        <param name="initial_pose_y"    value="$(arg initial_pose_y)" />
        <param name="initial_pose_a"    value="$(arg initial_pose_a)" />
    </node>

    <!-- Start GPS if outdoor localization -->
    <group unless="$(arg is_indoors)">
        <include file="$(find svea_sensors)/launch/rtk.launch">
            <arg name="device"      value="$(arg device)" />
        </include>
        <include file="$(find svea_sensors)/launch/navsat.launch">
            <arg name="delay"       value="$(arg delay)"/>
            <arg name="yaw_offset"  value="$(arg yaw_offset)"/>
        </include>

    </group>

    <node pkg="svea_sensors" type="odom_to_map" name="odom_to_map" output="screen">
        <param name="map_frame"             value="$(arg map_frame)"/>
        <param name="wait_for_transform"    value="$(arg wait_for_transform)"/>
        <param name="publish_odometry"      value="$(arg publish_odometry)"/>
        <param name="publish_pose"          value="$(arg publish_pose)"/>
    </node>

    <!-- Use web_camera to detect aruco -->
    <group if="$(arg use_web_camera)">    
        <include file="$(find svea_sensors)/launch/camera.launch">
            <arg name="image"               value="$(arg image)"/>
            <arg name="camera_info_file"    value="$(arg camera_info_file)"/>
            <arg name="aruco_pose"          value="$(arg aruco_pose)"/>
            <arg name="aruco_dict"          value="$(arg aruco_dict)"/>
            <arg name="aruco_size"          value="$(arg aruco_size)"/>
            <arg name="aruco_tf_name"       value="$(arg aruco_tf_name)"/>
            <arg name="device_id"           value="$(arg device_id)"/>
        </include>
        <node name="static_aruco_pose" pkg="svea_sensors" type="aruco_pose.py" output="screen"/>
    </group>

</launch>